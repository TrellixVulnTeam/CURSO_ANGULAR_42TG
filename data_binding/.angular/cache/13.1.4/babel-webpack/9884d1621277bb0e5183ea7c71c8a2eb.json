{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nconst _c0 = [\"campoInput\"];\nexport let OutputPropertyComponent = /*#__PURE__*/(() => {\n  class OutputPropertyComponent {\n    constructor() {\n      this.valor = 0;\n      this.mudouValor = new EventEmitter();\n    }\n\n    incrementa() {\n      this.campoValorInput.nativeElement.value++;\n      this.mudouValor.emit({\n        novoValor: this.valor\n      });\n    }\n\n    decrementa() {\n      this.campoValorInput.nativeElement.value--;\n      this.mudouValor.emit({\n        novoValor: this.valor\n      });\n    }\n\n    ngOnInit() {}\n\n  }\n\n  OutputPropertyComponent.ɵfac = function OutputPropertyComponent_Factory(t) {\n    return new (t || OutputPropertyComponent)();\n  };\n\n  OutputPropertyComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OutputPropertyComponent,\n    selectors: [[\"contador\"]],\n    viewQuery: function OutputPropertyComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.campoValorInput = _t.first);\n      }\n    },\n    inputs: {\n      valor: \"valor\"\n    },\n    outputs: {\n      mudouValor: \"mudouValor\"\n    },\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"btn\", \"btn-primary\", 3, \"click\"], [\"type\", \"text\", \"readonly\", \"\", 3, \"value\"], [\"campoInput\", \"\"]],\n    template: function OutputPropertyComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\");\n        i0.ɵɵelementStart(1, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function OutputPropertyComponent_Template_button_click_1_listener() {\n          return ctx.decrementa();\n        });\n        i0.ɵɵtext(2, \"-\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"input\", 1, 2);\n        i0.ɵɵelementStart(5, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function OutputPropertyComponent_Template_button_click_5_listener() {\n          return ctx.incrementa();\n        });\n        i0.ɵɵtext(6, \"+\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"value\", ctx.valor);\n      }\n    },\n    styles: [\"\"]\n  });\n  return OutputPropertyComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}